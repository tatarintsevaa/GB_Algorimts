<?php
/*
 * 1. Определить сложность следующих алгоритмов:
- Поиск элемента массива с известным индексом - Ответ: O(1) (если это не массив PHP:)) Я не уверен, но чтобы взять элемент
из массива по индексу нужна одна операция, так мы знаем в какой ячейке лежит искомое значение, а в PHP наверно О(n).
- Дублирование одномерного массива через foreach Ответ: О(n)
- Рекурсивная функция нахождения факториала числа Ответ: О(n*2) Я так думаю, так как например факториал для 4. Сначало
будет стек из 4 ёх вызовов, а потом они будут вычисляться в обратном порядке.
 *
 *
 *
 *
 * */


function factorial($x)
{
    if ($x === 0) return 1;
    else return $x * factorial($x - 1);
}

$start = microtime(true);
echo factorial(4) . PHP_EOL;
echo microtime(true) - $start . PHP_EOL;

/*2.Определить сложность следующих алгоритмов. Сколько произойдет итераций?
1)

$n = 100;
$array[]= [];

for ($i = 0; $i < $n; $i++) {
for ($j = 1; $j < $n; $j *= 2) {
$array[$i][$j]= true;
} }
Ответ: О(n*(log(n)))

2)

$n = 100;
$array[] = [];

for ($i = 0; $i < $n; $i += 2) {
for ($j = $i; $j < $n; $j++) {
$array[$i][$j]= true;

Ответ: О((n/2) * n)=O((n^2)/2)
} }

*/